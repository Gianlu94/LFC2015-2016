Grammatica

    0 $accept: program $end

    1 program: function

    2 function: function stmt
    3         | %empty

    4 stmt: ';'
    5     | expr ';'
    6     | PRINT expr ';'
    7     | VARIABLE '=' expr ';'
    8     | WHILE '(' expr ')' stmt
    9     | IF '(' expr ')' stmt
   10     | IF '(' expr ')' stmt ELSE stmt
   11     | FOR '(' VARIABLE '=' INTEGER TO INTEGER ')' stmt
   12     | '{' stmt_list '}'

   13 stmt_list: stmt
   14          | stmt_list stmt

   15 expr: INTEGER
   16     | VARIABLE
   17     | '-' expr
   18     | expr '+' expr
   19     | expr '-' expr
   20     | expr '*' expr
   21     | expr '/' expr
   22     | expr '<' expr
   23     | expr '>' expr
   24     | expr GE expr
   25     | expr LE expr
   26     | expr NE expr
   27     | expr EQ expr
   28     | '(' expr ')'


Simboli terminali e regole in cui appaiono

$end (0) 0
'(' (40) 8 9 10 11 28
')' (41) 8 9 10 11 28
'*' (42) 20
'+' (43) 18
'-' (45) 17 19
'/' (47) 21
';' (59) 4 5 6 7
'<' (60) 22
'=' (61) 7 11
'>' (62) 23
'{' (123) 12
'}' (125) 12
error (256)
INTEGER (258) 11 15
VARIABLE (259) 7 11 16
WHILE (260) 8
IF (261) 9 10
PRINT (262) 6
FOR (263) 11
TO (264) 11
IFX (265)
ELSE (266) 10
GE (267) 24
LE (268) 25
EQ (269) 27
NE (270) 26
UMINUS (271)


Simboli nonterminali e regole in cui appaiono

$accept (29)
    nel primo membro: 0
program (30)
    nel primo membro: 1, nel secondo membro: 0
function (31)
    nel primo membro: 2 3, nel secondo membro: 1 2
stmt (32)
    nel primo membro: 4 5 6 7 8 9 10 11 12, nel secondo membro: 2 8
    9 10 11 13 14
stmt_list (33)
    nel primo membro: 13 14, nel secondo membro: 12 14
expr (34)
    nel primo membro: 15 16 17 18 19 20 21 22 23 24 25 26 27 28, nel secondo membro:
    5 6 7 8 9 10 17 18 19 20 21 22 23 24 25 26 27 28


Stato 0

    0 $accept: . program $end

    $default  riduzione con la regola 3 (function)

    program   prosecuzione allo stato 1
    function  prosecuzione allo stato 2


Stato 1

    0 $accept: program . $end

    $end  shift e prosecuzione allo stato 3


Stato 2

    1 program: function .
    2 function: function . stmt

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 5
    WHILE     shift e prosecuzione allo stato 6
    IF        shift e prosecuzione allo stato 7
    PRINT     shift e prosecuzione allo stato 8
    FOR       shift e prosecuzione allo stato 9
    '-'       shift e prosecuzione allo stato 10
    ';'       shift e prosecuzione allo stato 11
    '('       shift e prosecuzione allo stato 12
    '{'       shift e prosecuzione allo stato 13

    $default  riduzione con la regola 1 (program)

    stmt  prosecuzione allo stato 14
    expr  prosecuzione allo stato 15


Stato 3

    0 $accept: program $end .

    $default  accetta


Stato 4

   15 expr: INTEGER .

    $default  riduzione con la regola 15 (expr)


Stato 5

    7 stmt: VARIABLE . '=' expr ';'
   16 expr: VARIABLE .

    '='  shift e prosecuzione allo stato 16

    $default  riduzione con la regola 16 (expr)


Stato 6

    8 stmt: WHILE . '(' expr ')' stmt

    '('  shift e prosecuzione allo stato 17


Stato 7

    9 stmt: IF . '(' expr ')' stmt
   10     | IF . '(' expr ')' stmt ELSE stmt

    '('  shift e prosecuzione allo stato 18


Stato 8

    6 stmt: PRINT . expr ';'

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 20


Stato 9

   11 stmt: FOR . '(' VARIABLE '=' INTEGER TO INTEGER ')' stmt

    '('  shift e prosecuzione allo stato 21


Stato 10

   17 expr: '-' . expr

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 22


Stato 11

    4 stmt: ';' .

    $default  riduzione con la regola 4 (stmt)


Stato 12

   28 expr: '(' . expr ')'

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 23


Stato 13

   12 stmt: '{' . stmt_list '}'

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 5
    WHILE     shift e prosecuzione allo stato 6
    IF        shift e prosecuzione allo stato 7
    PRINT     shift e prosecuzione allo stato 8
    FOR       shift e prosecuzione allo stato 9
    '-'       shift e prosecuzione allo stato 10
    ';'       shift e prosecuzione allo stato 11
    '('       shift e prosecuzione allo stato 12
    '{'       shift e prosecuzione allo stato 13

    stmt       prosecuzione allo stato 24
    stmt_list  prosecuzione allo stato 25
    expr       prosecuzione allo stato 15


Stato 14

    2 function: function stmt .

    $default  riduzione con la regola 2 (function)


Stato 15

    5 stmt: expr . ';'
   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    GE   shift e prosecuzione allo stato 26
    LE   shift e prosecuzione allo stato 27
    EQ   shift e prosecuzione allo stato 28
    NE   shift e prosecuzione allo stato 29
    '>'  shift e prosecuzione allo stato 30
    '<'  shift e prosecuzione allo stato 31
    '+'  shift e prosecuzione allo stato 32
    '-'  shift e prosecuzione allo stato 33
    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35
    ';'  shift e prosecuzione allo stato 36


Stato 16

    7 stmt: VARIABLE '=' . expr ';'

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 37


Stato 17

    8 stmt: WHILE '(' . expr ')' stmt

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 38


Stato 18

    9 stmt: IF '(' . expr ')' stmt
   10     | IF '(' . expr ')' stmt ELSE stmt

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 39


Stato 19

   16 expr: VARIABLE .

    $default  riduzione con la regola 16 (expr)


Stato 20

    6 stmt: PRINT expr . ';'
   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    GE   shift e prosecuzione allo stato 26
    LE   shift e prosecuzione allo stato 27
    EQ   shift e prosecuzione allo stato 28
    NE   shift e prosecuzione allo stato 29
    '>'  shift e prosecuzione allo stato 30
    '<'  shift e prosecuzione allo stato 31
    '+'  shift e prosecuzione allo stato 32
    '-'  shift e prosecuzione allo stato 33
    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35
    ';'  shift e prosecuzione allo stato 40


Stato 21

   11 stmt: FOR '(' . VARIABLE '=' INTEGER TO INTEGER ')' stmt

    VARIABLE  shift e prosecuzione allo stato 41


Stato 22

   17 expr: '-' expr .
   18     | expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    $default  riduzione con la regola 17 (expr)


Stato 23

   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr
   28     | '(' expr . ')'

    GE   shift e prosecuzione allo stato 26
    LE   shift e prosecuzione allo stato 27
    EQ   shift e prosecuzione allo stato 28
    NE   shift e prosecuzione allo stato 29
    '>'  shift e prosecuzione allo stato 30
    '<'  shift e prosecuzione allo stato 31
    '+'  shift e prosecuzione allo stato 32
    '-'  shift e prosecuzione allo stato 33
    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35
    ')'  shift e prosecuzione allo stato 42


Stato 24

   13 stmt_list: stmt .

    $default  riduzione con la regola 13 (stmt_list)


Stato 25

   12 stmt: '{' stmt_list . '}'
   14 stmt_list: stmt_list . stmt

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 5
    WHILE     shift e prosecuzione allo stato 6
    IF        shift e prosecuzione allo stato 7
    PRINT     shift e prosecuzione allo stato 8
    FOR       shift e prosecuzione allo stato 9
    '-'       shift e prosecuzione allo stato 10
    ';'       shift e prosecuzione allo stato 11
    '('       shift e prosecuzione allo stato 12
    '{'       shift e prosecuzione allo stato 13
    '}'       shift e prosecuzione allo stato 43

    stmt  prosecuzione allo stato 44
    expr  prosecuzione allo stato 15


Stato 26

   24 expr: expr GE . expr

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 45


Stato 27

   25 expr: expr LE . expr

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 46


Stato 28

   27 expr: expr EQ . expr

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 47


Stato 29

   26 expr: expr NE . expr

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 48


Stato 30

   23 expr: expr '>' . expr

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 49


Stato 31

   22 expr: expr '<' . expr

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 50


Stato 32

   18 expr: expr '+' . expr

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 51


Stato 33

   19 expr: expr '-' . expr

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 52


Stato 34

   20 expr: expr '*' . expr

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 53


Stato 35

   21 expr: expr '/' . expr

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 19
    '-'       shift e prosecuzione allo stato 10
    '('       shift e prosecuzione allo stato 12

    expr  prosecuzione allo stato 54


Stato 36

    5 stmt: expr ';' .

    $default  riduzione con la regola 5 (stmt)


Stato 37

    7 stmt: VARIABLE '=' expr . ';'
   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    GE   shift e prosecuzione allo stato 26
    LE   shift e prosecuzione allo stato 27
    EQ   shift e prosecuzione allo stato 28
    NE   shift e prosecuzione allo stato 29
    '>'  shift e prosecuzione allo stato 30
    '<'  shift e prosecuzione allo stato 31
    '+'  shift e prosecuzione allo stato 32
    '-'  shift e prosecuzione allo stato 33
    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35
    ';'  shift e prosecuzione allo stato 55


Stato 38

    8 stmt: WHILE '(' expr . ')' stmt
   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    GE   shift e prosecuzione allo stato 26
    LE   shift e prosecuzione allo stato 27
    EQ   shift e prosecuzione allo stato 28
    NE   shift e prosecuzione allo stato 29
    '>'  shift e prosecuzione allo stato 30
    '<'  shift e prosecuzione allo stato 31
    '+'  shift e prosecuzione allo stato 32
    '-'  shift e prosecuzione allo stato 33
    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35
    ')'  shift e prosecuzione allo stato 56


Stato 39

    9 stmt: IF '(' expr . ')' stmt
   10     | IF '(' expr . ')' stmt ELSE stmt
   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    GE   shift e prosecuzione allo stato 26
    LE   shift e prosecuzione allo stato 27
    EQ   shift e prosecuzione allo stato 28
    NE   shift e prosecuzione allo stato 29
    '>'  shift e prosecuzione allo stato 30
    '<'  shift e prosecuzione allo stato 31
    '+'  shift e prosecuzione allo stato 32
    '-'  shift e prosecuzione allo stato 33
    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35
    ')'  shift e prosecuzione allo stato 57


Stato 40

    6 stmt: PRINT expr ';' .

    $default  riduzione con la regola 6 (stmt)


Stato 41

   11 stmt: FOR '(' VARIABLE . '=' INTEGER TO INTEGER ')' stmt

    '='  shift e prosecuzione allo stato 58


Stato 42

   28 expr: '(' expr ')' .

    $default  riduzione con la regola 28 (expr)


Stato 43

   12 stmt: '{' stmt_list '}' .

    $default  riduzione con la regola 12 (stmt)


Stato 44

   14 stmt_list: stmt_list stmt .

    $default  riduzione con la regola 14 (stmt_list)


Stato 45

   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   24     | expr GE expr .
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    '+'  shift e prosecuzione allo stato 32
    '-'  shift e prosecuzione allo stato 33
    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35

    $default  riduzione con la regola 24 (expr)


Stato 46

   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   25     | expr LE expr .
   26     | expr . NE expr
   27     | expr . EQ expr

    '+'  shift e prosecuzione allo stato 32
    '-'  shift e prosecuzione allo stato 33
    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35

    $default  riduzione con la regola 25 (expr)


Stato 47

   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr
   27     | expr EQ expr .

    '+'  shift e prosecuzione allo stato 32
    '-'  shift e prosecuzione allo stato 33
    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35

    $default  riduzione con la regola 27 (expr)


Stato 48

   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   26     | expr NE expr .
   27     | expr . EQ expr

    '+'  shift e prosecuzione allo stato 32
    '-'  shift e prosecuzione allo stato 33
    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35

    $default  riduzione con la regola 26 (expr)


Stato 49

   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   23     | expr '>' expr .
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    '+'  shift e prosecuzione allo stato 32
    '-'  shift e prosecuzione allo stato 33
    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35

    $default  riduzione con la regola 23 (expr)


Stato 50

   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   22     | expr '<' expr .
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    '+'  shift e prosecuzione allo stato 32
    '-'  shift e prosecuzione allo stato 33
    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35

    $default  riduzione con la regola 22 (expr)


Stato 51

   18 expr: expr . '+' expr
   18     | expr '+' expr .
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35

    $default  riduzione con la regola 18 (expr)


Stato 52

   18 expr: expr . '+' expr
   19     | expr . '-' expr
   19     | expr '-' expr .
   20     | expr . '*' expr
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    '*'  shift e prosecuzione allo stato 34
    '/'  shift e prosecuzione allo stato 35

    $default  riduzione con la regola 19 (expr)


Stato 53

   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   20     | expr '*' expr .
   21     | expr . '/' expr
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    $default  riduzione con la regola 20 (expr)


Stato 54

   18 expr: expr . '+' expr
   19     | expr . '-' expr
   20     | expr . '*' expr
   21     | expr . '/' expr
   21     | expr '/' expr .
   22     | expr . '<' expr
   23     | expr . '>' expr
   24     | expr . GE expr
   25     | expr . LE expr
   26     | expr . NE expr
   27     | expr . EQ expr

    $default  riduzione con la regola 21 (expr)


Stato 55

    7 stmt: VARIABLE '=' expr ';' .

    $default  riduzione con la regola 7 (stmt)


Stato 56

    8 stmt: WHILE '(' expr ')' . stmt

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 5
    WHILE     shift e prosecuzione allo stato 6
    IF        shift e prosecuzione allo stato 7
    PRINT     shift e prosecuzione allo stato 8
    FOR       shift e prosecuzione allo stato 9
    '-'       shift e prosecuzione allo stato 10
    ';'       shift e prosecuzione allo stato 11
    '('       shift e prosecuzione allo stato 12
    '{'       shift e prosecuzione allo stato 13

    stmt  prosecuzione allo stato 59
    expr  prosecuzione allo stato 15


Stato 57

    9 stmt: IF '(' expr ')' . stmt
   10     | IF '(' expr ')' . stmt ELSE stmt

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 5
    WHILE     shift e prosecuzione allo stato 6
    IF        shift e prosecuzione allo stato 7
    PRINT     shift e prosecuzione allo stato 8
    FOR       shift e prosecuzione allo stato 9
    '-'       shift e prosecuzione allo stato 10
    ';'       shift e prosecuzione allo stato 11
    '('       shift e prosecuzione allo stato 12
    '{'       shift e prosecuzione allo stato 13

    stmt  prosecuzione allo stato 60
    expr  prosecuzione allo stato 15


Stato 58

   11 stmt: FOR '(' VARIABLE '=' . INTEGER TO INTEGER ')' stmt

    INTEGER  shift e prosecuzione allo stato 61


Stato 59

    8 stmt: WHILE '(' expr ')' stmt .

    $default  riduzione con la regola 8 (stmt)


Stato 60

    9 stmt: IF '(' expr ')' stmt .
   10     | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift e prosecuzione allo stato 62

    $default  riduzione con la regola 9 (stmt)


Stato 61

   11 stmt: FOR '(' VARIABLE '=' INTEGER . TO INTEGER ')' stmt

    TO  shift e prosecuzione allo stato 63


Stato 62

   10 stmt: IF '(' expr ')' stmt ELSE . stmt

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 5
    WHILE     shift e prosecuzione allo stato 6
    IF        shift e prosecuzione allo stato 7
    PRINT     shift e prosecuzione allo stato 8
    FOR       shift e prosecuzione allo stato 9
    '-'       shift e prosecuzione allo stato 10
    ';'       shift e prosecuzione allo stato 11
    '('       shift e prosecuzione allo stato 12
    '{'       shift e prosecuzione allo stato 13

    stmt  prosecuzione allo stato 64
    expr  prosecuzione allo stato 15


Stato 63

   11 stmt: FOR '(' VARIABLE '=' INTEGER TO . INTEGER ')' stmt

    INTEGER  shift e prosecuzione allo stato 65


Stato 64

   10 stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  riduzione con la regola 10 (stmt)


Stato 65

   11 stmt: FOR '(' VARIABLE '=' INTEGER TO INTEGER . ')' stmt

    ')'  shift e prosecuzione allo stato 66


Stato 66

   11 stmt: FOR '(' VARIABLE '=' INTEGER TO INTEGER ')' . stmt

    INTEGER   shift e prosecuzione allo stato 4
    VARIABLE  shift e prosecuzione allo stato 5
    WHILE     shift e prosecuzione allo stato 6
    IF        shift e prosecuzione allo stato 7
    PRINT     shift e prosecuzione allo stato 8
    FOR       shift e prosecuzione allo stato 9
    '-'       shift e prosecuzione allo stato 10
    ';'       shift e prosecuzione allo stato 11
    '('       shift e prosecuzione allo stato 12
    '{'       shift e prosecuzione allo stato 13

    stmt  prosecuzione allo stato 67
    expr  prosecuzione allo stato 15


Stato 67

   11 stmt: FOR '(' VARIABLE '=' INTEGER TO INTEGER ')' stmt .

    $default  riduzione con la regola 11 (stmt)
